Fichier -> with Ada'.'Text_I0';'use Ada'.' Text_I0 ';' 
procedure IDENT is DECLSTAR 
begin INSTRPLUS end IDENTINTERRO ';' EOF .

DECL -> IDENTPLUSVIRGULE ':' TYPE SUITE .
SUITE -> .
SUITE ->  ':=' EXPR  ';' .
DECL -> procedure IDENT PARAMSINTERRO is DECLSTAR
begin INSTRPLUS end IDENTINTERRO ';' .
DECL -> function IDENT PARAMSINTERRO return TYPE is DECLSTAR
begin INSTRPLUS end IDENTINTERRO ';' .
DECL -> type IDENT DECLBIS .
DECLBIS -> ';' .
DECLBIS -> is DECLTER .

DECLTER -> record CHAMPSPLUS end record ';' .

CHAMPS -> IDENTPLUSVIRGULE ':' TYPE ';' .

TYPE -> IDENT .
TYPE -> integer .
TYPE -> character .
TYPE -> boolean .
TYPE -> float .

PARAMS -> '(' PARAMSPLUSPOINTVIRGULE ')' .

PARAM -> IDENTPLUSVIRGULE ':' MODEINTERRO TYPE .

MODE -> IN MODEBIS .
MODEBIS -> OUT .
MODEBIS -> .

EXPR -> EXPRSIMPLE EXPRRESTANT .

EXPRSIMPLE -> ENTIER .
EXPRSIMPLE -> CARACTERE .
EXPRSIMPLE -> true .
EXPRSIMPLE -> false .
EXPRSIMPLE -> null .
EXPRSIMPLE -> '(' EXPR ')' .
EXPRSIMPLE -> not EXPRSIMPLE .
EXPRSIMPLE -> '-' EXPRSIMPLE .
EXPRSIMPLE -> IDENT EXPRACCES .
EXPRSIMPLE -> character 'â€˜' val '(' EXPR ')' .
EXPRACCES -> '(' EXPRPLUSVIRGULE ')' .
EXPRACCES -> '.' IDENT IDENTPOINT .
EXPRACCES -> .

EXPRRESTANT -> OPERATEUR EXPR .
EXPRRESTANT -> .

INSTR -> return EXPRINTERRO ';' .
INSTR -> begin INSTRPLUS end ';' .
INSTR -> if EXPR then INSTRPLUS  BOUCLE1  BOUCLE2  end if ';' .
INSTR -> for IDENT in REVERSE EXPR '..' EXPR
loop INSTRPLUS end loop ';' .
INSTR -> while EXPR loop INSTRPLUS end loop ';' .
INSTR -> IDENT INSTRBIS .
INSTRBIS -> ';' .
INSTRBIS -> '(' EXPRPLUSVIRGULE ')' ';' .

INSTRBIS -> IDENTPOINT ':=' EXPR ';' .
IDENTPOINT -> '.' IDENT IDENTPOINT .
IDENTPOINT -> .

OPERATEUR -> '=' .
OPERATEUR -> '/=' .
OPERATEUR -> '<' .
OPERATEUR -> '<=' .
OPERATEUR -> '>' .
OPERATEUR -> '>=' .
OPERATEUR -> '+' .
OPERATEUR -> '-' .
OPERATEUR -> '*' .
OPERATEUR -> '/' .
OPERATEUR -> rem .
OPERATEUR -> and OPERATEURBIS .
OPERATEURBIS -> then .
OPERATEURBIS -> .
OPERATEURBIS -> or OPERATEURTER .
OPERATEURTER -> else .
OPERATEURTER -> .

DECLSTAR -> DECL DECLSTAR .
DECLSTAR -> . 

INSTRPLUS -> INSTR INSTRPLUS2 .  
INSTRPLUS2 -> INSTRPLUS .
INSTRPLUS2 -> .

IDENTINTERRO -> IDENT .
IDENTINTERRO -> .

CHAMPSPLUS -> CHAMPS CHAMPSPLUS2 .
CHAMPSPLUS2 -> CHAMPSPLUS .
CHAMPSPLUS2 -> .

EXPRINTERRO -> EXPR .
EXPRINTERRO -> .

PARAMSINTERRO -> PARAMS .
PARAMSINTERRO -> .

PARAMSPLUSPOINTVIRGULE -> PARAM PARAMVIRGULE .

PARAMVIRGULE -> .
PARAMVIRGULE -> PARAM ',' .

MODEINTERRO -> MODE .
MODEINTERRO -> .

EXPRPLUSVIRGULE -> EXPR EXPRVIRGULE .

EXPRVIRGULE -> ',' EXPRPLUSVIRGULE .
EXPRVIRGULE -> .
BOUCLE1 ->  elsif EXPR then INSTRPLUS BOUCLE1 .
BOUCLE1 -> .

BOUCLE2 -> else  INSTRPLUS  ';' .
BOUCLE2 -> .
